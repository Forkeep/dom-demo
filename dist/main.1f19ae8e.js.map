{"version":3,"sources":["main.js"],"names":["div1","dom","cerate","append","document","body","style","a","console","log","b","class","add","remove","has","on","fn","off","div2","find","parent","children","siblings","next","previous","div3","index"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEAA,IAAI,GAAGC,GAAG,CAACC,MAAJ,CAAW,8FAAX,CAAP;AACAD,GAAG,CAACE,MAAJ,CAAWC,QAAQ,CAACC,IAApB,EAAyBL,IAAzB;AAIAC,GAAG,CAACK,KAAJ,CAAUN,IAAV,EAAe;AAAC,WAAQ,KAAT;AAAe,sBAAmB,MAAlC;AAAyC,YAAS;AAAlD,CAAf,GACA;;AACAO,CAAC,GAAGN,GAAG,CAACK,KAAJ,CAAUN,IAAV,EAAe,OAAf,CAAJ;AACAQ,OAAO,CAACC,GAAR,CAAYF,CAAZ;AAEAG,CAAC,GAAGT,GAAG,CAACK,KAAJ,CAAUN,IAAV,CAAJ;AACAQ,OAAO,CAACC,GAAR,CAAYC,CAAZ;AAEAT,GAAG,CAACU,KAAJ,CAAUC,GAAV,CAAcZ,IAAd,EAAmB,CAAC,QAAD,EAAU,QAAV,EAAmB,QAAnB,EAA4B,QAA5B,CAAnB;AACAC,GAAG,CAACU,KAAJ,CAAUE,MAAV,CAAiBb,IAAjB,EAAsB,QAAtB;AACAQ,OAAO,CAACC,GAAR,CAAYR,GAAG,CAACU,KAAJ,CAAUG,GAAV,CAAcd,IAAd,EAAmB,QAAnB,CAAZ;AAEAC,GAAG,CAACc,EAAJ,CAAOf,IAAP,EAAY,OAAZ,EAAoB,YAAI;AAACQ,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AAAsB,CAA/C;;AACAO,EAAE,GAAG,cAAI;AAACR,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AAAuB,CAAjC;;AACAR,GAAG,CAACc,EAAJ,CAAOf,IAAP,EAAY,OAAZ,EAAoBgB,EAApB,EAAuB,KAAvB;AACAf,GAAG,CAACgB,GAAJ,CAAQjB,IAAR,EAAa,OAAb,EAAqBgB,EAArB,EAAwB,KAAxB;AAEA,IAAME,IAAI,GAAGjB,GAAG,CAACkB,IAAJ,CAAS,YAAT,EAAsBnB,IAAtB,EAA4B,CAA5B,CAAb,EAA4C;;AAC5CQ,OAAO,CAACC,GAAR,CAAYS,IAAZ;AACAV,OAAO,CAACC,GAAR,CAAYR,GAAG,CAACmB,MAAJ,CAAWpB,IAAX,CAAZ;AACAQ,OAAO,CAACC,GAAR,CAAYR,GAAG,CAACoB,QAAJ,CAAarB,IAAb,CAAZ;AAEAQ,OAAO,CAACC,GAAR,CAAYR,GAAG,CAACqB,QAAJ,CAAatB,IAAb,CAAZ;AAEAQ,OAAO,CAACC,GAAR,CAAYR,GAAG,CAACsB,IAAJ,CAASL,IAAT,CAAZ;AACAV,OAAO,CAACC,GAAR,CAAYR,GAAG,CAACuB,QAAJ,CAAaxB,IAAb,CAAZ;AAGA,IAAMyB,IAAI,GAAGxB,GAAG,CAACkB,IAAJ,CAAS,YAAT,EAAsBnB,IAAtB,CAAb,EAAyC;;AACzCQ,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAD,OAAO,CAACC,GAAR,CAAYgB,IAAZ;AAEAjB,OAAO,CAACC,GAAR,CAAYR,GAAG,CAACyB,KAAJ,CAAUR,IAAV,CAAZ","file":"main.1f19ae8e.js","sourceRoot":"../src","sourcesContent":["// const div = dom.find('#test>.red')[0] // 获取对应的元素\n// dom.style(div, 'color', 'red') // 设置 div.style.color\n//\n// const divList = dom.find('.red') // 获取多个 div.red 元素\n// dom.each(divList, (n)=> console.log(n)) // 遍历 divList 里的所有元素\n\ndiv1 = dom.cerate('<div id=\"test\"> 爸爸<div class=\"red\"> 老大</div><div>老二</div><div class=\"red\">老三</div>    </div>')\ndom.append(document.body,div1)\n\n\n\ndom.style(div1,{'color':'red','background-color':'blue','border':'5px solid black'})\n// a = dom.style(div1,'background-color','blue')\na = dom.style(div1,'color')\nconsole.log(a)\n\nb = dom.style(div1)\nconsole.log(b)\n\ndom.class.add(div1,['class1','class2','class3','class4'])\ndom.class.remove(div1,'class1')\nconsole.log(dom.class.has(div1,'class4'))\n\ndom.on(div1,'click',()=>{console.log('别惦记我了！')})\nfn = ()=>{console.log('好吧我走我走！')}\ndom.on(div1,'click',fn,false)\ndom.off(div1,'click',fn,false)\n\nconst div2 = dom.find('#test>.red',div1)[0] // 获取对应的元素\nconsole.log(div2)\nconsole.log(dom.parent(div1))\nconsole.log(dom.children(div1))\n\nconsole.log(dom.siblings(div1))\n\nconsole.log(dom.next(div2))\nconsole.log(dom.previous(div1))\n\n\nconst div3 = dom.find('#test>.red',div1) // 获取对应的元素\nconsole.log('div3')\nconsole.log(div3)\n\nconsole.log(dom.index(div2))"]}